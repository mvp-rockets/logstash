input {
    jdbc {
        type => "logs"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java8-5.1.23.jar"
        jdbc_driver_class => "com.mysql.jdbc.Driver"
        schedule => "* * * * *"
        use_column_value => true
        tracking_column => "unix_ts_in_secs"
        tracking_column_type => "numeric"
        # statement => "SELECT *, UNIX_TIMESTAMP(updated_at) AS unix_ts_in_secs FROM users WHERE (UNIX_TIMESTAMP(updated_at) > :sql_last_value AND updated_at < NOW()) ORDER BY id ASC"
        statement => "SELECT
  users.id as id,
  users.name,
  users.age,
  cars.id as car_id,
  cars.name as car_name,
  users.updated_at,
  UNIX_TIMESTAMP(users.updated_at)
FROM
  users
  LEFT JOIN users_cars ON users.id = users_cars.userId
  LEFT JOIN cars ON users_cars.carId = cars.id
  WHERE (UNIX_TIMESTAMP(users.updated_at) > :sql_last_value AND users.updated_at < NOW()) order by id"
    }
}
#filter {
#     aggregate {
#         task_id => "event.task_id"
#         code => "
#             if (!map[event.task_id]) {
#                 map[event.task_id] = {count: 0, total: 0};
#             }
#             map[event.task_id].count++;
#             map[event.task_id].total += event.value;
#             event.average = map[event.task_id].total / map[event.task_id].count;
#             event.count = map[event.task_id].count;
#         "
#         map_init => "var map = new Object;"
#         timeout => 5
#         push_previous_map_as_event => true
#     }
#     javascript {
#         script => "event = event.get('aggregate_event')"
#     }
# }

# filter {
#   javascript {
#     script => "
#       var event = JSON.parse(event.toString());
#       event.message = event.message.toUpperCase();
#       event = JSON.stringify(event);
#       return event;
#     "
#   }
# }

# filter {
#     javascript {
#         source => "
#             if (event.message.length > 100) {
#                 event.tags.add('long_message');
#             }
#             if (event.fields.temperature > 30) {
#                 event.tags.add('high_temperature');
#             }
#         "
#     }
# }

output {
    stdout {
    codec => rubydebug {
      metadata => true # This makes the logs to appear in console
    }
  }
    opensearch {
        hosts => ["${LOGSTASH_OPENSEARCH_HOST}"]
        ssl => true
        ssl_certificate_verification => false
        user => "${LOGSTASH_OPENSEARCH_USER}"
        password => "${LOGSTASH_OPENSEARCH_PASSWORD}"
        index => "userscarsfinal1"
        document_id => "%{id}"
        ecs_compatibility => disabled

    }
}




